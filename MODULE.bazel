module(
    name = "cicada",
    version = "1.0.0-alpha",
)

# - Deps -
bazel_dep(name = "protobuf", version = "31.0-rc1", repo_name = "com_google_protobuf")
bazel_dep(name = "gazelle", version = "0.43.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_java", version = "8.11.0")
bazel_dep(name = "rules_go", version = "0.54.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "rules_proto_grpc", version = "5.0.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_pkg", version = "1.1.0")

# - Go modules -
go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")

# Download an SDK for the host OS & architecture as well as common remote execution
# platforms, with a specific version.
go_sdk.download(version = "1.24.2")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(go_deps, "org_golang_google_grpc")

# - OCI -
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Declare external images you need to pull
oci.pull(
    name = "distroless_base",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
    tag = "latest",
)
oci.pull(
    name = "go_alpine",
    image = "docker.io/library/golang",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
    tag = "1.24-alpine",
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64", "go_alpine", "go_alpine_linux_amd64", "go_alpine_linux_arm64")

# - Misc -
# Bring the host_platform extension into scope
host_platform = use_extension("@platforms//host:extension.bzl", "host_platform")

# Import the host_platform repo so toolchains/platforms are registered
use_repo(host_platform, "host_platform")
